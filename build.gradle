plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.react.prac'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // springboot dependency
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // lombok dependency
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // spring-data-jpa dependency
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // implementation 'com.h2database:h2'

    // maria-db
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.0.8'

    // mustache dependency
    implementation 'org.springframework.boot:spring-boot-starter-mustache'
    // spring-security dependency
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // oauth2-add
    implementation 'org.springframework.boot:spring-boot-starter-validation' // validation 어노테이션 사용을 위함
    testImplementation 'org.springframework.security:spring-security-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools' // 소스 변경시 자동 빌드
    // email-auth dependency
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    /*
        spring-boot-devtools 사용을 위해 아래와 같이 추가 세팅하기
        Build, Exeution, Deployment > Compiler > Build project autiomaically 체크
        Advanced Settings > Allow auto-make to start even if developed application is currently running 체크
    */
    // jwt token dependency
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
    implementation 'javax.xml.bind:jaxb-api:2.3.0' // java 버전에 따른 JAXV API 제거로 인한 의존성 추가 
}

war {
    enabled = false
}

// react ---

//def webappDir = "$projectDir/src/main/webapp/reactapp"
//
//sourceSets {
//    main {
//        resources {
//            srcDirs = ["$projectDir/src/main/resources"]
//        }
//    }
//}
//
//processResources {
//    dependsOn "copyReactBuildFiles"
//}
//
//task installReact(type: Exec) {
//    workingDir "$webappDir"
//    inputs.dir "$webappDir"
//    group = BasePlugin.BUILD_GROUP
//    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//        commandLine "npm.cmd", "audit", "fix"
//        commandLine 'npm.cmd', 'install'
//    } else {
//        commandLine "npm", "audit", "fix"
//        commandLine 'npm', 'install'
//    }
//}
//
//task buildReact(type: Exec) {
//    dependsOn "installReact"
//    workingDir "$webappDir"
//    inputs.dir "$webappDir"
//    group = BasePlugin.BUILD_GROUP
//    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//        commandLine "npm.cmd", "run-script", "build"
//    } else {
//        commandLine "npm", "run-script", "build"
//    }
//}
//
//task copyReactBuildFiles(type: Copy) {
//    dependsOn "buildReact"
//    from "$webappDir/build"
//    into "$projectDir/src/main/resources/static"
//}

// react ---

tasks.named('test') {
    useJUnitPlatform()
}
